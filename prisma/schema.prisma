generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_DATABASE_URL")
}

model Profile {
  id                          String                 @id @default(uuid())
  clerkId                     String                 @unique
  firstName                   String
  lastName                    String
  email                       String
  profileImage                String
  age                         Int
  gender                      String
  height                      Int
  weight                      Int
  activityLevel               String
  allergies                   String
  allMealPlansOfTheUser       MealPlan[]
  allTrackCaloriesOfTheUser   TrackCalorieOfTheDay[]
  allSuggestReceipesOfTheUser SuggestReceipe[]
  createdAt                   DateTime               @default(now())
  updatedAt                   DateTime               @updatedAt
}

model MealPlan {
  id                                  String   @id @default(uuid())
  healthGoal                          String
  dietPreference                      String
  calorieTarget                       String
  mealPlanCreatedByTheGeminiModel     String
  idOfTheProfileWhoCreatedTheMealPlan String
  profile                             Profile  @relation(fields: [idOfTheProfileWhoCreatedTheMealPlan], references: [clerkId], onDelete: Cascade)
  createdAt                           DateTime @default(now())
  updatedAt                           DateTime @updatedAt
}

model TrackCalorieOfTheDay {
  id                                                            String   @id @default(uuid())
  mealTypeTakenToday                                            String
  foodItemsTakenToday                                           String
  portionSizeOfEachFoodTakenToday                               String
  approximateTotalCalorieOfAllTheFoodsTogetherTakenToday        String
  approximateTotalMacroNutrientsOfAllTheFoodsTogetherTakenToday String
  calorieTrackCreatedByTheGeminiModel                           String
  idOfTheProfileWhoCreatedTheTrackCalorie                       String
  profile                                                       Profile  @relation(fields: [idOfTheProfileWhoCreatedTheTrackCalorie], references: [clerkId], onDelete: Cascade)
  createdAt                                                     DateTime @default(now())
  updatedAt                                                     DateTime @updatedAt
}

model SuggestReceipe {
  id                                        String   @id @default(uuid())
  mealType                                  String
  timeThatCanBeGivenToCooking               String
  dailyCalorieTarget                        String
  ingredientsToInclude                      String
  ingredientsToExclude                      String
  receipeSuggestCreatedByTheGeminiModel     String
  idOfTheProfileWhoCreatedTheSuggestReceipe String
  profile                                   Profile  @relation(fields: [idOfTheProfileWhoCreatedTheSuggestReceipe], references: [clerkId], onDelete: Cascade)
  createdAt                                 DateTime @default(now())
  updatedAt                                 DateTime @updatedAt
}
